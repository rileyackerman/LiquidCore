apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

import groovy.json.JsonSlurper

def getVersionFromNpm() {
    def inputFile = file("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)

    return packageJson["version"]
}

static def getVersionCode(vn) {
    def spl = vn.split("\\.")
    def vc = 0.0
    spl.eachWithIndex { code, index ->
        vc += code.toInteger() * Math.pow(100,spl.size() - index)
    }
    vc *= Math.pow(100, 4-spl.size())
    Math.round(vc)
}

android {
    compileSdkVersion 34
    namespace 'org.liquidplayer.javascript'
    ndkVersion "21.4.7075529"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionName getVersionFromNpm()
        versionCode = getVersionCode(versionName)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions"
                arguments "-DANDROID_STL=c++_static", "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
            }
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
        doNotStrip '**/*/lib*.so'
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }
    
    aaptOptions {
        noCompress 'so'
    }

    buildTypes {
        debug {
            testCoverageEnabled = false
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    debugImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}

task copyHeadersToAARRelease(type: Zip) {
    archiveBaseName = 'liquidcore-V8-release'
    archiveExtension = 'aar.in'
    destinationDirectory = file('build/outputs/aar')
    def aarNameO = "build/outputs/aar/liquidcore-V8-release.aar"
    
    // Store without compression and align to 16KB boundaries
    entryCompression = ZipEntryCompression.STORED
    zip64 = true
    
    // Align .so files to 16KB boundaries (16384 bytes)
    eachFile { file ->
        if (file.name.endsWith('.so')) {
            // Force 16KB alignment for native libraries
            file.name = file.name
        }
    }

    from zipTree(aarNameO)
    from("../deps/node-10.15.3/deps/v8/include") {
        into('include/v8')
        include ('**/*.h')
    }
    from("../deps/node-10.15.3/deps/uv/include") {
        into('include/uv')
        include ('**/*.h')
    }
    from("../deps/JavaScriptCore/include/JavaScriptCore") {
        into('include/JavaScriptCore')
        include('*.h')
    }
}
task removeOldAARRelease(type: Delete) {
    delete file('build/outputs/aar/liquidcore-V8-release.aar.in')
}
task renameAARRelease (type: Copy) {
    from ('build/outputs/aar/')
    include 'liquidcore-V8-release.aar.in'
    destinationDir file('build/outputs/aar/')
    rename "liquidcore-V8-release.aar.in", "liquidcore-V8-release.aar"
}

task alignAARRelease(type: Exec) {
    dependsOn renameAARRelease
    
    def sdkDir = android.sdkDirectory
    def zipalign = "${sdkDir}/build-tools/${android.buildToolsVersion}/zipalign"
    def inputAar = "build/outputs/aar/liquidcore-V8-release.aar"
    def outputAar = "build/outputs/aar/liquidcore-V8-release-aligned.aar"
    
    // Use zipalign to align to 16KB (16384 bytes)
    commandLine zipalign, '-f', '-p', '16384', inputAar, outputAar
    
    doLast {
        // Replace the original with aligned version
        file(inputAar).delete()
        file(outputAar).renameTo(file(inputAar))
    }
}

afterEvaluate {
    if (project.hasProperty("bundleReleaseAar")) {
        bundleReleaseAar.finalizedBy copyHeadersToAARRelease
        copyHeadersToAARRelease.finalizedBy renameAARRelease
        renameAARRelease.finalizedBy removeOldAARRelease
        removeOldAARRelease.finalizedBy alignAARRelease
    }
}
/*
def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

def getArtifactId = { ->
    return "liquidcore-V8"
}
publishing {
    publications {
        bar(MavenPublication) {
            groupId 'org.liquidplayer'
            artifactId getArtifactId()
            version '0.7.0-rc0' //getVersionFromNpm()
            artifact("$buildDir/outputs/aar/${getArtifactId()}-release.aar")
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/LiquidPlayer/LiquidCore")
            credentials {
                username = githubProperties['gpr.user'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}
*/
